/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockDEX,
  MockDEXInterface,
} from "../../../contracts/MockDEX.sol/MockDEX";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_turnstile",
        type: "address",
      },
      {
        internalType: "address",
        name: "_turnstileBond",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "tokenId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "turnstile",
    outputs: [
      {
        internalType: "contract ITurnstile",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "turnstileBond",
    outputs: [
      {
        internalType: "contract ITurnstileBond",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60e060405234801561001057600080fd5b5060405161026338038061026383398101604081905261002f916100cb565b6001600160a01b03828116608081905290821660a052604051632210724360e11b8152336004820152634420e486906024016020604051808303816000875af1158015610080573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100a491906100fe565b60c052506101179050565b80516001600160a01b03811681146100c657600080fd5b919050565b600080604083850312156100de57600080fd5b6100e7836100af565b91506100f5602084016100af565b90509250929050565b60006020828403121561011057600080fd5b5051919050565b60805160a05160c0516101206101436000396000604501526000607e0152600060c801526101206000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c806317d70f7c14604157806365ca0b4b14607a578063b38d43571460c4575b600080fd5b60677f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b60a07f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016071565b60a07f00000000000000000000000000000000000000000000000000000000000000008156fea2646970667358221220b1a8f7c71b543c07c9c799ef4f32c554185c940335974bbac42150f10249648a64736f6c63430008120033";

type MockDEXConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockDEXConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockDEX__factory extends ContractFactory {
  constructor(...args: MockDEXConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _turnstile: PromiseOrValue<string>,
    _turnstileBond: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockDEX> {
    return super.deploy(
      _turnstile,
      _turnstileBond,
      overrides || {}
    ) as Promise<MockDEX>;
  }
  override getDeployTransaction(
    _turnstile: PromiseOrValue<string>,
    _turnstileBond: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _turnstile,
      _turnstileBond,
      overrides || {}
    );
  }
  override attach(address: string): MockDEX {
    return super.attach(address) as MockDEX;
  }
  override connect(signer: Signer): MockDEX__factory {
    return super.connect(signer) as MockDEX__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockDEXInterface {
    return new utils.Interface(_abi) as MockDEXInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockDEX {
    return new Contract(address, _abi, signerOrProvider) as MockDEX;
  }
}
